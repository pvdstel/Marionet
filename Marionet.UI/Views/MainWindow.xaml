<Window
    x:Class="Marionet.UI.Views.MainWindow"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:Marionet.UI.ViewModels;assembly=Marionet.UI"
    Width="600"
    Height="550"
    MinWidth="600"
    MinHeight="550"
    d:DesignHeight="550"
    d:DesignWidth="600"
    Icon="/Assets/logo.ico"
    IsVisible="False"
    mc:Ignorable="d">

    <Window.Title>
        <MultiBinding Mode="OneTime" StringFormat="Marionet {0} @ {1}">
            <Binding Path="AppVersion" />
            <Binding Path="SelfName" />
        </MultiBinding>
    </Window.Title>

    <Window.Resources>
        <SolidColorBrush x:Key="RunningBrush">#00E676</SolidColorBrush>
        <SolidColorBrush x:Key="OffBrush">#F44336</SolidColorBrush>
        <SolidColorBrush x:Key="EnabledBrush">#40C4FF</SolidColorBrush>
        <SolidColorBrush x:Key="DisabledBrush">#FFAB40</SolidColorBrush>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Margin="16,16,16,0">
            <WrapPanel IsVisible="{Binding IsSupervisorRunning, Mode=OneWay}">
                <Ellipse
                    Width="16"
                    Height="16"
                    Margin="0,0,10,0"
                    Fill="{DynamicResource RunningBrush}" />
                <TextBlock FontSize="24" Text="The Marionet service supervisor is up and running." />
            </WrapPanel>
            <WrapPanel IsVisible="{Binding !IsSupervisorRunning, Mode=OneWay}">
                <Ellipse
                    Width="16"
                    Height="16"
                    Margin="0,0,10,0"
                    Fill="{DynamicResource OffBrush}" />
                <TextBlock FontSize="24" Text="The Marionet service supervisor is not active." />
            </WrapPanel>
            <WrapPanel Margin="0,5,0,0" IsVisible="{Binding IsRunningAllowed, Mode=OneWay}">
                <Ellipse
                    Width="12"
                    Height="12"
                    Margin="2,0,12,0"
                    Fill="{DynamicResource EnabledBrush}" />
                <TextBlock Text="The Marionet service is allowed to run." />
            </WrapPanel>
            <WrapPanel Margin="0,5,0,0" IsVisible="{Binding !IsRunningAllowed, Mode=OneWay}">
                <Ellipse
                    Width="12"
                    Height="12"
                    Margin="2,0,12,0"
                    Fill="{DynamicResource DisabledBrush}" />
                <TextBlock Text="The Marionet service is not allowed to run by the run conditions." />
            </WrapPanel>
            <WrapPanel Margin="0,5,0,0" IsVisible="{Binding IsHostRunning, Mode=OneWay}">
                <Ellipse
                    Width="12"
                    Height="12"
                    Margin="2,0,12,0"
                    Fill="{DynamicResource RunningBrush}" />
                <TextBlock Text="The Marionet host is active." />
            </WrapPanel>
            <WrapPanel Margin="0,5,0,0" IsVisible="{Binding !IsHostRunning, Mode=OneWay}">
                <Ellipse
                    Width="12"
                    Height="12"
                    Margin="2,0,12,0"
                    Fill="{DynamicResource OffBrush}" />
                <TextBlock Text="The Marionet host is not active." />
            </WrapPanel>
            <WrapPanel Margin="0,5,0,0" IsVisible="{Binding IsDebug, Mode=OneTime}">
                <Ellipse
                    Width="12"
                    Height="12"
                    Margin="2,0,12,0"
                    Fill="{DynamicResource DisabledBrush}" />
                <TextBlock Text="This is a debug build of Marionet." />
            </WrapPanel>
        </StackPanel>

        <WrapPanel Grid.Row="1" Margin="16,16,16,0">
            <Button
                Margin="0,0,16,16"
                Command="{Binding StartSupervisorCommand, Mode=OneTime}"
                Content="Start Marionet supervisor" />
            <Button
                Margin="0,0,16,16"
                Command="{Binding StopSupervisorCommand, Mode=OneTime}"
                Content="Stop Marionet supervisor" />
        </WrapPanel>

        <Rectangle
            Grid.Row="2"
            Height="1"
            Fill="{DynamicResource ThemeBorderLowBrush}"
            IsVisible="{Binding !IsWaiting, Mode=OneWay}" />
        <ProgressBar
            Grid.Row="2"
            Height="3"
            MinHeight="3"
            IsIndeterminate="True"
            IsVisible="{Binding IsWaiting, Mode=OneWay}" />
        <ContentControl Grid.Row="3" Margin="16,16,16,8">
            <TextBlock Text="The Marionet service will continue to run once you close this window." />
        </ContentControl>
        <WrapPanel Grid.Row="4" Margin="16,0">
            <Button
                Margin="0,0,16,16"
                Command="{Binding ExitApplicationCommand, Mode=OneTime}"
                Content="Exit application"
                ToolTip.Tip="Shutdown all Marionet components and do not keep the application running in the background." />
            <Button
                Margin="0,0,16,16"
                Command="{Binding OpenSettingsFileCommand, Mode=OneTime}"
                Content="Open settings file" />
            <Button
                Margin="0,0,16,16"
                Command="{Binding OpenSettingsDirectoryCommand, Mode=OneTime}"
                Content="Open settings directory" />
        </WrapPanel>

        <Rectangle
            Grid.Row="5"
            Height="1"
            Fill="{DynamicResource ThemeBorderLowBrush}" />

        <Grid Grid.Row="6">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TextBlock Margin="16,16,16,0" Text="Known desktops" />
            <ListBox
                Grid.Row="1"
                Margin="16,8"
                Items="{Binding KnownHosts, Mode=OneWay}"
                SelectedItem="{Binding SelectedHost}" />
            <StackPanel
                Grid.Row="1"
                Grid.Column="1"
                Margin="0,8,16,16">
                <Button Command="{Binding MoveSelectedHostUpCommand, Mode=OneWay}" CommandParameter="{Binding SelectedHost, Mode=OneWay}">
                    <Viewbox>
                        <Canvas Width="24" Height="24">
                            <Path Data="M14,20H10V11L6.5,14.5L4.08,12.08L12,4.16L19.92,12.08L17.5,14.5L14,11V20Z" Fill="{DynamicResource ThemeForegroundBrush}" />
                        </Canvas>
                    </Viewbox>
                </Button>
                <Button
                    Margin="0,10,0,0"
                    Command="{Binding MoveSelectedHostDownCommand, Mode=OneWay}"
                    CommandParameter="{Binding SelectedHost, Mode=OneWay}">
                    <Viewbox>
                        <Canvas Width="24" Height="24">
                            <Path Data="M10,4H14V13L17.5,9.5L19.92,11.92L12,19.84L4.08,11.92L6.5,9.5L10,13V4Z" Fill="{DynamicResource ThemeForegroundBrush}" />
                        </Canvas>
                    </Viewbox>
                </Button>
            </StackPanel>
            <TextBlock
                Grid.Row="2"
                Margin="16,0"
                Text="{Binding PeerStatuses.Count, StringFormat=Status of peers ({0})}" />
            <ListBox
                Grid.Row="3"
                Margin="16,8,16,16"
                Items="{Binding PeerStatuses}">
                <ListBox.ItemTemplate>
                    <DataTemplate DataType="vm:PeerStatus">
                        <Panel>
                            <TextBlock Text="{Binding Name}" />
                            <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                                <TextBlock Margin="10,0,0,0" Text="Roles:" />
                                <TextBlock
                                    Margin="10,0,0,0"
                                    IsVisible="{Binding IsClient}"
                                    Text="client" />
                                <TextBlock
                                    Margin="10,0,0,0"
                                    IsVisible="{Binding IsServer}"
                                    Text="server" />
                            </StackPanel>
                        </Panel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
            <Rectangle
                Grid.Row="4"
                Grid.ColumnSpan="2"
                Height="1"
                Fill="{DynamicResource ThemeBorderLowBrush}" />
            <StackPanel Grid.Row="5" Margin="16,16,16,12">
                <TextBlock
                    Margin="0,0,0,4"
                    IsVisible="{Binding IsAdmin, Mode=OneTime}"
                    Text="Marionet is running under privileged user credentials." />
                <TextBlock
                    Margin="0,0,0,4"
                    IsVisible="{Binding !IsAdmin, Mode=OneTime}"
                    Text="Marionet is running under standard user credentials." />
                <TextBlock
                    Margin="0,0,0,4"
                    IsVisible="{Binding HasUiAccess, Mode=OneTime}"
                    Text="Marionet has user interface accessibility access." />
                <TextBlock
                    Margin="0,0,0,4"
                    IsVisible="{Binding !HasUiAccess, Mode=OneTime}"
                    Text="Marionet does not have user interface accessibility access." />
            </StackPanel>
        </Grid>
    </Grid>

</Window>
